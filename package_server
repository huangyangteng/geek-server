#!/usr/bin/env node
const SERVER = {
    migu42: {
        host: '10.1.69.42',
        port: 19222,
        username: 'diyvrbt',
        password: '1qaz@WSX',

        // 要发送的代码包本地目录,可以是绝对路径，也可以是相对路径
        distPath: 'dist',
        // 远程服务器部署路径
        remoteBuildPath:
            '/home/diyvrbt/video_diy/ringtone-video-hub/webpage/dev',
        // 代码在远程服务器的存放路径
        remoteCodePath: '/home/diyvrbt/code',
        buildScript: 'npm run build' //默认是npm run build
    }
}

const shell = require('shelljs')
const Client = require('ssh2').Client
const dayjs = require('dayjs')
const chalk = require('chalk')

function getLastWord(str) {
    return str.split('/').pop()
}
function log(str) {
    console.log(chalk.blueBright(str))
}

/**
 * 该脚本的作用是：把本地打包之后的文件发送到远程服务器
 *  1. 先压缩文件
 *  2. 发送到远程服务器
 *  3. 与部署代码的路径同步
 *  4. 删除文件
 */

;(function() {
    // 获取传入的参数，决定发送到哪个服务器
    const [nodeEnv, dir, ...args] = process.argv
    // 如果没有传入，默认选远程服务器列表中的第一个
    const serverNo = args.length == 0 ? Object.keys(SERVER)[0] : args[0]

    if (!Object.keys(SERVER).includes(String(serverNo))) {
        throw new Error('服务器不存在')
    }
    const server = SERVER[serverNo]

    const {
        remoteBuildPath,
        remoteCodePath,
        distPath,
        buildScript = 'npm run build'
    } = server
    const appName = getLastWord(distPath)

    // 本地目录
    const localPath = appName + '.tar.gz'
    // 服务器文件名
    const remoteDirName =
        appName + '_' + dayjs().format('YYYYMMDDTHHmmss') + '.tar.gz'
    // 服务器目录
    // 存放代码目录

    const remotePath = `${remoteCodePath}/${remoteDirName}`
    log(`
        服务器信息：${JSON.stringify(server)}
        本地目录：${localPath}
        远程目录：${remotePath}
        `)

    const conn = new Client()
    // 删除之前的文件

    // 打包
    console.log(chalk.blueBright('执行命令 npm run build'))
    shell.exec(buildScript)

    // 压缩文件
    shell.exec(`tar -zcf ${localPath} ${appName}`)

    conn.on('ready', () => {
        log('Client::ready')
        // log('sft服务器连接成功，准备传输文件')
        conn.sftp((err, sftp) => {
            log('sftp连接成功')
            if (err) throw err

            sftp.fastPut(
                localPath,
                remotePath,
                {
                    chunkSize: 2000,
                    concurrency: 64,
                    step(total_transferred, chunk, total) {
                        // 打印一下进度
                        log(Math.floor((total_transferred / total) * 100) + '%')
                    }
                },
                err => {
                    if (err) {
                        console.log('err', err)
                        conn.end()
                        return
                    }
                    // 1. 解压  2. 同步文件  3. 删除
                    const script = `
                    cd ${remoteCodePath} && 
                    pwd &&
										rm -rf ${appName}    &&
                    tar -zxf ${remoteDirName} &&
                    rsync -rtplze  --progress --stats ${appName}/ ${remoteBuildPath}  && 
                    rm ${remoteDirName}
                `
                    console.log('传输完文件要执行的命令：', script)

                    conn.exec(script, (err, stream) => {
                        if (err) {
                            console.log(err)
                            return
                        }
                        stream
                            .on('close', function(args) {
                                console.log('close', args)
                                if (args == 0) {
                                    log('success!')
                                }
                                conn.end()
                            })
                            .on('data', function(data) {
                                console.log('data', data.toString())
                            })
                    })
                }
            )
        })
    }).connect(server)
})()